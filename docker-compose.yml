services:
  redis:
    image: redis/redis-stack-server:latest
    volumes:
      - redis-data:/data
    container_name: redis
    privileged: true
    command: bash -c "sysctl vm.overcommit_memory=1 && redis-server --protected-mode no --save 20 1 --loglevel warning --protected-mode no --loadmodule /opt/redis-stack/lib/redisearch.so --loadmodule /opt/redis-stack/lib/rejson.so"
    ports:
      - '6379:6379'
    networks:
      - app-network
    sysctls:
      net.core.somaxconn: 512

  flask:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    volumes:
      - ./src/training_data:/app/src/training_data
    environment:
      - FLASK_APP=/src/api/app.py
    depends_on:
      - redis
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: flask
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_BASIC_ENABLED=false
      - GF_ENABLE_GZIP=true
      - GF_USERS_DEFAULT_THEME=light
      - GF_DEFAULT_APP_MODE=development
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./custom.ini:/etc/grafana/grafana.ini
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
  redis-exporter:
    image: oliver006/redis_exporter
    ports:
      - 9121:9121
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis:6379"
    links:
      - redis
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  redis-data:
    driver: local
  grafana_data: { }
